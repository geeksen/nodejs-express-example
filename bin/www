#!/usr/bin/env nodejs

'use strict'

/**
 * Module dependencies.
 */

let cfg = require('../cfg')
let app = require('../app')
let debug = require('debug')('nodejs-express-example:server')
let http = require('http')

/**
 * Get port from environment and store in Express.
 */

let sPort = cfg.server.port // normalizePort(process.env.PORT || '3000')
app.set('port', sPort)

let mysql = require('mysql')
let db000 = mysql.createPool(cfg.db000)
let db001 = mysql.createPool(cfg.db001)
app.set('db000', db000)
app.set('db001', db001)

/*
let redis = require('redis')
let rd000 = redis.createClient(cfg.rd000.port, cfg.rd000.host)
let rd001 = redis.createClient(cfg.rd001.port, cfg.rd001.host)
app.set('rd000', rd000)
app.set('rd001', rd001)
*/

/**
 * Create HTTP server.
 */

let server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(sPort)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

/*
function normalizePort (val) {
  let port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}
*/

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  let sBind = typeof port === 'string'
    ? 'Pipe ' + sPort
    : 'Port ' + sPort

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(sBind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(sBind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  let addr = server.address()
  let sBind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + sBind)
}

function gracefulShutdown () {
  db000.end()
  db001.end()

  // rd000.quit()
  // rd001.quit()

  server.close(function () {
    process.exit()
  })

  setTimeout(function () {
    process.exit()
  }, 10 * 1000)
}

process.on('SIGTERM', gracefulShutdown) // kill -15
process.on('SIGINT', gracefulShutdown) // Ctrl + c
